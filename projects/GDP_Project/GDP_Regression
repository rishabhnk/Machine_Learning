# GDP Regression

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('combined_results_filtered.csv')
dataset = dataset.dropna(subset=['GDP']) # drop all rown that dont have a GDP value
X = dataset.iloc[:, 0:22].values
y = dataset.iloc[:, 23].values.reshape(-1, 1)

# Taking care of missing data - mean strategy
from sklearn.preprocessing import Imputer
imputer = Imputer(missing_values="NaN", strategy="mean", axis = 1)
X[:,1:22] = imputer.fit_transform(X[:,1:22])

# Splitting the dataset into Traning and Testing set
from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train[:,1:22] = sc_X.fit_transform(X_train[:,1:22])
X_test[:,1:22] = sc_X.transform(X_test[:,1:22])

sc_y = StandardScaler()
y_train = sc_y.fit_transform(y_train)

# Fitting the Regression Model to the dataset
"look at Rfr and Polynomial"
from sklearn.svm import SVR
regressor = SVR(kernel = 'linear')
regressor.fit(X_train[:,1:22],y_train)

# Predicting a new result


#Date vs GDP
plt.plot(X_test[:,0], y_test, color = 'blue')
plt.title('Date vs GDP')
plt.xlabel('Date')
plt.ylabel('GDP')
plt.show()
"""
# Visualising the Regression results
plt.scatter(X, y, color = 'red')
plt.plot(X, regressor.predict(X), color = 'blue')
plt.title('Truth or Bluff (Regression Model)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

# Visualising the Regression results (for higher resolution and smoother curve)
X_grid = np.arange(min(X), max(X), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(X, y, color = 'red')
plt.plot(X_grid, regressor.predict(X_grid), color = 'blue')
plt.title('Truth or Bluff (Regression Model)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
"""
